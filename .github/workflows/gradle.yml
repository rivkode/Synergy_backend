# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  # Spring Boot 애플리케이션을 빌드하여 도커허브에 푸시하는 과정
  build-docker-image-on-local:
    runs-on: self-hosted
    steps:
      - name: change project directory
        run: cd C:\Users\jongh\java\springproject\synergy


      - name: Set YML from Secrets
        run: |
          $base64Text = "${{ secrets.APPLICATION_YML }}"
          [Text.Encoding]::UTF8.GetString([Convert]::FromBase64String($base64Text)) | Set-Content -Path src/main/resources/application.yml

      # 0. Java 11 세팅
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'


      # 1. 애플리케이션 빌드 권한 부여
#      - name: Grant execute permission for gradlew
#        run: chmod +x gradlew

      # 2. 애플리케이션 빌드
      - name: Build with Gradle
        run: ./gradlew build -x test

      # 3. DockerHub 로그인
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      #4 Docker 이미지 빌드
      - name: docker image build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }} .


      # 5. Docker Hub 이미지 푸시
      - name: docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}


  # 위 과정에서 푸시한 이미지를 ec2에서 풀받아서 실행시키는 과정
  run-build-docker-image-on-ec2:
    needs: build-docker-image-on-local
    runs-on: ubuntu-latest

    steps:
      #0. EC2 접속
      - name: EC2 Connection
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.SSH_PORT }}

      # 1. Java 11 세팅
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      # 3. DockerHub 로그인
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: docker stop container
        run: docker stop $(docker ps -q) 2>/dev/null || true

      # 2. 기존의 컨테이너를 삭제합니다.
      - name: docker remove container
        run: docker rm -f ${{ secrets.PROJECT_NAME }} || true

      # 3. Docker 이미지를 삭제합니다.
      - name: docker rmi image
        run: docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }} || true

      # 2. Docker Hub 최신 이미지 풀
      - name: docker Hub pull
        run: docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}

      # 3. 최신 이미지를 컨테이너화하여 실행시킵니다
      - name: docker run new container
        run: docker run --name ${{ secrets.PROJECT_NAME}} -p ${{ secrets.PORT }}:${{ secrets.PORT }} ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}

#      # 4. 미사용 이미지를 정리합니다
#      - name: delete old docker image
#        run: docker system prune -f








# ec2
#    # SET YML
#    - name: Set YML
#      run: |
#        mkdir -p src/main/resources
#        echo "${{ secrets.APPLICATION_YML }}" | base64 --decode > src/main/resources/application.yml
#        find src
#
    # 2. Spring Boot 애플리케이션 빌드
#    - name: Build with Gradle
#      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
#      with:
#        arguments: clean bootJar
#        gradle-version: '7.6.1'
#
#    # 3. DockerHub 로그인
#    - name: docker login
#      uses: docker/login-action@v2
#      with:
#        username: ${{ secrets.DOCKERHUB_USERNAME }}
#        password: ${{ secrets.DOCKERHUB_PASSWORD }}
#
#    #4 Docker 이미지 빌드
#    - name: docker image build
#      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }} .
#
# local
#    # 5. Docker Hub 이미지 푸시
#    - name: docker Hub push
#      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}


      #      # 1. 기존의 컨테이너를 중지시킵니다
      #      - name: docker stop container
      #        run: docker ps -q | ForEach-Object { docker stop $_ 2>$null }


#            # 2. 기존의 컨테이너를 삭제합니다.
#            - name: docker remove container
#              run: docker rm -f ${{ secrets.PROJECT_NAME }}
#
#            # 3. Docker 이미지를 삭제합니다.
#            - name: docker rmi image
#              run: docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}

#      # 4. 최신 이미지를 풀받습니다
#      - name: docker pull
#        run: docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}


#      # 5. 최신 이미지를 컨테이너화하여 실행시킵니다
#      - name: docker run new container
#        run: docker run --name ${{ secrets.PROJECT_NAME}} --rm -p ${{ secrets.PORT }}:${{ secrets.PORT }} -d ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}
#
#      # 6. 미사용 이미지를 정리합니다
#      - name: delete old docker image
#        run: docker system prune -f